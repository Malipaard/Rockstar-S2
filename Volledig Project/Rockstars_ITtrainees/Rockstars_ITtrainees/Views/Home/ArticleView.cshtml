@model ITtrainees.Models.Article
@{
    ViewData["Title"] = "ArticleUpload";
}

<script src="~/js/quill.js"></script>
<script src="~/js/quill.min.js"></script>

<link rel="stylesheet" href="~/css/site.css" />
<link rel="stylesheet" href="~/css/NavBar.css" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

@{string encodedImg = "data:image/png;base64, " + Model.HeaderImage.ToString(); }

<style>
    .parallax {
        /* The image used */
        background-image: url("@encodedImg") ;
        /* Set a specific height */
        min-height: 500px;
        /* Create the parallax scrolling effect */
        background-attachment: fixed;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }


</style>

<body>

    <div class="container">
        <div class="text-light">
            <img class=" card-img-top card-image" src="data:image/png;base64, @Model.HeaderImage" alt="placeholder" , style="max-height:400px;">

            <h1 class="card-title centered-title">@Model.Title</h1>
            <p class="card-author">Author: @Model.Author</p>
        </div>
    </div>
    <div class="text-light container-fluid ">
        <div class="row justify-content-center">
            <p class="card-author" id="contentContainer">De inhoud van het artikel kan niet geladen worden</p>
            <p class="" hidden id="rawContent">@Model.Content</p>
        </div>
    </div>


    @using (Html.BeginForm("UpdateArticle", "Home", FormMethod.Post))
    {
        <table>
            <tr>
                <td style="display:none">
                    @Html.TextBoxFor(m => Model.ArticleId)
                </td>
                <td>
                    <input class="yellow_bg btn text-dark" type="submit" value="Edit" />
                </td>

        </table>
    }


</body>

<script>
    var contentString = document.getElementById('rawContent').innerHTML;
    var contentJSON = JSON.parse(contentString);
    document.getElementById('contentContainer').innerHTML = quillGetHTML(contentJSON);

    function quillGetHTML(inputDelta) {
        var tempCont = document.createElement("div");
        (new Quill(tempCont)).setContents(inputDelta);
        return tempCont.getElementsByClassName("ql-editor")[0].innerHTML;
    }
</script>